{"version":3,"sources":["components/Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","src","alt","map","genre","index","key","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","console","log","setState","this","movie","medium_cover_image","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6UAyCeA,MAlCf,YAA4D,EAA3CC,GAA4C,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,OAChD,OAAO,yBAAKC,UAAU,SAClB,yBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,yBAAKI,UAAU,cACX,wBAAIA,UAAU,eAAeJ,GAS7B,wBAAII,UAAU,UACTD,EAAOI,KAAK,SAACC,EAAOC,GAAR,OAAmB,wBAAIC,IAAKD,EAAOL,UAAU,gBAAgBI,OAG9E,wBAAIJ,UAAU,cAAcL,GAC5B,uBAAGK,UAAU,iBAAiBH,EAAQU,MAAM,EAAI,KAAhD,UCoEIC,G,kNAnFXC,MAAQ,CACJC,WAAW,EACXC,OAAS,I,EAYbC,U,sBAAY,8BAAAC,EAAA,sEAImCC,IAAMC,IAAI,4DAJ7C,gBAIgBJ,EAJhB,EAIAK,KAAQA,KAAQL,OACxBM,QAAQC,IAAI,oCAAYP,GASxB,EAAKQ,SAAS,CAAER,SAAQD,WAAY,IAd5B,2C,kEAsBRO,QAAQC,IAAI,aACZE,KAAKR,c,+BAKLK,QAAQC,IAAI,YADR,MAG0BE,KAAKX,MAA3BC,EAHJ,EAGIA,UAAWC,EAHf,EAGeA,OAEnB,OAAO,6BAUH,6BAASX,UAAU,cACdU,EACG,yBAAKV,UAAU,UACX,0BAAMA,UAAU,gBAAhB,eAGJ,yBAAKA,UAAU,UAEVW,EAAOR,KAAI,SAAAkB,GAAK,OACb,kBAAC,EAAD,CACIf,IAAKe,EAAM3B,GACXA,GAAI2B,EAAM3B,GACVC,KAAM0B,EAAM1B,KACZC,MAAOyB,EAAMzB,MACbC,QAASwB,EAAMxB,QACfC,OAAQuB,EAAMC,mBACdvB,OAAQsB,EAAMtB,kB,GA1E5BwB,IAAMC,YCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.415fdab6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport \"./Movie.css\";\r\n\r\n// component가 state값이 필요하지 않을 경우\r\n// 함수형으로 선언하면 됨\r\n\r\nfunction Movie( {id, year, title, summary, poster, genres}) {\r\n   return <div className=\"movie\">\r\n       <img src={poster} alt={title} title={title} />\r\n       <div className=\"movie_data\">\r\n           <h3 className=\"movie_title\">{title}</h3>\r\n           { /*  내가 장르 추가한거 :\r\n             <small className=\"movie_genre\">{genres}</small>\r\n             장르는 array이므로\r\n\r\n             2. map에 있는 각각의 item은 key가 필요함(없으면 에러남)\r\n             그래서 map의 argument인 currentItem, index를 사용할것임\r\n             (argument가 2개 이상인 경우에는 괄호로 묶어주기!)\r\n           */ }\r\n           <ul className=\"genres\">\r\n               {genres.map( (genre, index) => (<li key={index} className=\"genres_genre\">{genre}</li>\r\n               ))}\r\n           </ul>\r\n           <h5 className=\"movie_year\">{year}</h5>\r\n           <p className=\"movie_summary\">{summary.slice(0 , 200)}...</p>\r\n       </div>\r\n    </div>\r\n}\r\n\r\nMovie.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    // 내가 genres만 prop에 끼워본것 : genres: PropTypes.string.isRequired\r\n    // 노마드코더가 끼운방법 :\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n}\r\n\r\nexport default Movie;","import React from 'react';\nimport axios from 'axios';\nimport Movie from \"./components/Movie\";\nimport \"./App.css\";\n\n\n// React의 class는 함수가 아니기 때문에 return이 없음\n// react엔진은 자동으로 class component의 rendermethod를 실행함\nclass App extends React.Component {\n\n    state = {\n        isLoading: true,\n        movies : []\n    };\n\n    /*\n        1. axios는 항상 빠르지 않기 때문에 javascript에게 componentDidMount가\n         끝날때까지 약간 시간이 걸릴 수 있다고 알려줘야함\n\n        2. async와 await를 추가함\n               asnyc : 비동기 함수(== 너는 이걸 기다려야해)\n               await : (내가 뭘 기다려야해? -> axios) axios가 끝날때까지 기다렸다가 계속함.\n               (axios.get은 완료되기까지 시간이 좀 필요하기 때문에 사용)\n    */\n    getMovies = async () => {\n        // movie.json을 살펴보면 movielist데이터가 data.data.movie에 들어있음\n        // movies를 선언하고 movies.data.data.movie 식으로 데이터를 가져올 수도 있지만\n        // es6문법에서는 이런식으로 데이터를 바로 가지고 올 수 있다\n        const { data : {data : {movies}}} =  await axios.get('https://yts-proxy.now.sh/list_movies.json?sort_by=rating')\n        console.log('영화리스트 : ', movies);\n\n        // 첫번째 movies : state의 movie\n        // 두번째 movies : axios로부터 가져온 movies\n        // this.setState({movies : movies})\n        // 이걸 그냥 단축해서 아래와 같이 쓸 수 있음\n        // this.setState({ movies })\n\n        // isLoading값도 false로 바꿔줌\n        this.setState({ movies, isLoading : false });\n\n\n\n    }\n    /* componentDidMount 앞에 async를 넣어줌 */\n    componentDidMount(){\n\n        console.log(\"did mount\")\n        this.getMovies();\n\n    }\n\n    render(){\n        console.log(\"rendered\")\n        {/* */}\n        const { isLoading, movies } = this.state;\n\n        return <div>\n            { /*\n                ES6 이전 문법\n                state값을 직접 받아옴\n                {this.state.isLoading ? \"Loading\" : \"wd are ready\"}\n\n                {isLoading ? \"Loading...\" : \"we are ready\"}\n            */ }\n\n            { /* data rendering #### const로 선언해놓은 state값 가져오는 파라메터에 movies 추가하는거 잊지 않기 */}\n            <section className=\"container\"></section>\n                {isLoading ? (\n                    <div className=\"loader\">\n                        <span className=\"loader__text\">Loading...</span>\n                    </div>\n                ) : (\n                    <div className=\"movies\">\n\n                        {movies.map(movie => (\n                            <Movie\n                                key={movie.id}\n                                id={movie.id}\n                                year={movie.year}\n                                title={movie.title}\n                                summary={movie.summary}\n                                poster={movie.medium_cover_image}\n                                genres={movie.genres}\n                            />\n                        ))}\n                    </div>\n\n            )}\n        </div>\n    }\n\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}