{"version":3,"sources":["routes/About.js","components/Movie.js","routes/Home.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["About","Movie","id","year","title","summary","poster","genres","className","src","alt","map","genre","index","key","slice","Home","state","isLoading","movies","getMovies","a","axios","get","data","console","log","setState","this","movie","medium_cover_image","React","Component","Navigation","to","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iSAMeA,MAJf,WACI,OAAO,uF,gFCsCIC,MAlCf,YAA4D,EAA3CC,GAA4C,IAAxCC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,OAChD,OAAO,yBAAKC,UAAU,SAClB,yBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,yBAAKI,UAAU,cACX,wBAAIA,UAAU,eAAeJ,GAS7B,wBAAII,UAAU,UACTD,EAAOI,KAAK,SAACC,EAAOC,GAAR,OAAmB,wBAAIC,IAAKD,EAAOL,UAAU,gBAAgBI,OAG9E,wBAAIJ,UAAU,cAAcL,GAC5B,uBAAGK,UAAU,iBAAiBH,EAAQU,MAAM,EAAI,KAAhD,UCoEIC,G,kNAnFXC,MAAQ,CACJC,WAAW,EACXC,OAAS,I,EAYbC,U,sBAAY,8BAAAC,EAAA,sEAImCC,IAAMC,IAAI,4DAJ7C,gBAIgBJ,EAJhB,EAIAK,KAAQA,KAAQL,OACxBM,QAAQC,IAAI,oCAAYP,GASxB,EAAKQ,SAAS,CAAER,SAAQD,WAAY,IAd5B,2C,kEAsBRO,QAAQC,IAAI,aACZE,KAAKR,c,+BAKLK,QAAQC,IAAI,YADR,MAG0BE,KAAKX,MAA3BC,EAHJ,EAGIA,UAAWC,EAHf,EAGeA,OAEnB,OAAO,6BAUH,6BAASX,UAAU,cAClBU,EACG,yBAAKV,UAAU,UACX,0BAAMA,UAAU,gBAAhB,eAGJ,yBAAKA,UAAU,UAEVW,EAAOR,KAAI,SAAAkB,GAAK,OACb,kBAAC,EAAD,CACIf,IAAKe,EAAM3B,GACXA,GAAI2B,EAAM3B,GACVC,KAAM0B,EAAM1B,KACZC,MAAOyB,EAAMzB,MACbC,QAASwB,EAAMxB,QACfC,OAAQuB,EAAMC,mBACdvB,OAAQsB,EAAMtB,kB,GA1EvBwB,IAAMC,Y,MCiBVC,MArBf,WAaI,OACA,yBAAKzB,UAAU,OACX,kBAAC,IAAD,CAAM0B,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,WCKOC,MAnBf,WACI,OAUA,kBAAC,IAAD,KACI,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAWtB,IACxC,kBAAC,IAAD,CAAOoB,KAAK,SAASC,OAAO,EAAMC,UAAWtC,MCRjCuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.f3437fef.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction About(){\r\n    return <span>About this page : I built it because I love Movies. </span>\r\n}\r\n\r\nexport default About;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport \"./Movie.css\";\r\n\r\n// component가 state값이 필요하지 않을 경우\r\n// 함수형으로 선언하면 됨\r\n\r\nfunction Movie( {id, year, title, summary, poster, genres}) {\r\n   return <div className=\"movie\">\r\n       <img src={poster} alt={title} title={title} />\r\n       <div className=\"movie_data\">\r\n           <h3 className=\"movie_title\">{title}</h3>\r\n           { /*  내가 장르 추가한거 :\r\n             <small className=\"movie_genre\">{genres}</small>\r\n             장르는 array이므로\r\n\r\n             2. map에 있는 각각의 item은 key가 필요함(없으면 에러남)\r\n             그래서 map의 argument인 currentItem, index를 사용할것임\r\n             (argument가 2개 이상인 경우에는 괄호로 묶어주기!)\r\n           */ }\r\n           <ul className=\"genres\">\r\n               {genres.map( (genre, index) => (<li key={index} className=\"genres_genre\">{genre}</li>\r\n               ))}\r\n           </ul>\r\n           <h5 className=\"movie_year\">{year}</h5>\r\n           <p className=\"movie_summary\">{summary.slice(0 , 200)}...</p>\r\n       </div>\r\n    </div>\r\n}\r\n\r\nMovie.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    // 내가 genres만 prop에 끼워본것 : genres: PropTypes.string.isRequired\r\n    // 노마드코더가 끼운방법 :\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n}\r\n\r\nexport default Movie;","import React from 'react';\r\nimport axios from 'axios';\r\nimport Movie from \"../components/Movie\";\r\nimport \"./Home.css\";\r\n\r\n\r\n// React의 class는 함수가 아니기 때문에 return이 없음\r\n// react엔진은 자동으로 class component의 rendermethod를 실행함\r\nclass Home extends React.Component {\r\n\r\n    state = {\r\n        isLoading: true,\r\n        movies : []\r\n    };\r\n\r\n    /*\r\n        1. axios는 항상 빠르지 않기 때문에 javascript에게 componentDidMount가\r\n         끝날때까지 약간 시간이 걸릴 수 있다고 알려줘야함\r\n\r\n        2. async와 await를 추가함\r\n               asnyc : 비동기 함수(== 너는 이걸 기다려야해)\r\n               await : (내가 뭘 기다려야해? -> axios) axios가 끝날때까지 기다렸다가 계속함.\r\n               (axios.get은 완료되기까지 시간이 좀 필요하기 때문에 사용)\r\n    */\r\n    getMovies = async () => {\r\n        // movie.json을 살펴보면 movielist데이터가 data.data.movie에 들어있음\r\n        // movies를 선언하고 movies.data.data.movie 식으로 데이터를 가져올 수도 있지만\r\n        // es6문법에서는 이런식으로 데이터를 바로 가지고 올 수 있다\r\n        const { data : {data : {movies}}} =  await axios.get('https://yts-proxy.now.sh/list_movies.json?sort_by=rating')\r\n        console.log('영화리스트 : ', movies);\r\n\r\n        // 첫번째 movies : state의 movie\r\n        // 두번째 movies : axios로부터 가져온 movies\r\n        // this.setState({movies : movies})\r\n        // 이걸 그냥 단축해서 아래와 같이 쓸 수 있음\r\n        // this.setState({ movies })\r\n\r\n        // isLoading값도 false로 바꿔줌\r\n        this.setState({ movies, isLoading : false });\r\n\r\n\r\n\r\n    }\r\n    /* componentDidMount 앞에 async를 넣어줌 */\r\n    componentDidMount(){\r\n\r\n        console.log(\"did mount\")\r\n        this.getMovies();\r\n\r\n    }\r\n\r\n    render(){\r\n        console.log(\"rendered\")\r\n        {/* */}\r\n        const { isLoading, movies } = this.state;\r\n\r\n        return <div>\r\n            { /*\r\n                ES6 이전 문법\r\n                state값을 직접 받아옴\r\n                {this.state.isLoading ? \"Loading\" : \"wd are ready\"}\r\n\r\n                {isLoading ? \"Loading...\" : \"we are ready\"}\r\n            */ }\r\n\r\n            { /* data rendering #### const로 선언해놓은 state값 가져오는 파라메터에 movies 추가하는거 잊지 않기 */}\r\n            <section className=\"container\"></section>\r\n            {isLoading ? (\r\n                <div className=\"loader\">\r\n                    <span className=\"loader__text\">Loading...</span>\r\n                </div>\r\n            ) : (\r\n                <div className=\"movies\">\r\n\r\n                    {movies.map(movie => (\r\n                        <Movie\r\n                            key={movie.id}\r\n                            id={movie.id}\r\n                            year={movie.year}\r\n                            title={movie.title}\r\n                            summary={movie.summary}\r\n                            poster={movie.medium_cover_image}\r\n                            genres={movie.genres}\r\n                        />\r\n                    ))}\r\n                </div>\r\n\r\n            )}\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\nexport default Home;\r\n\r\n\r\n","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Navigation.css\";\r\n\r\nfunction Navigation(){\r\n    /*\r\n                React에서 아래와 같은 href tag를 사용하지 않는 이유\r\n             html은 기본적으로 page를 모두 새로 reload(== 페이지를 강제로 새로고침하고 리액트 component를 죽임) 시키기 때문에 react의 철학과 전혀 맞지 않음.\r\n             게다가 rootPath도 없어서 /about으로 가면 그냥 localhost:8080/about으로 가기 때문에 그런 페이지는 안나옴(우리가 원하는 path가 아님)\r\n        <div>\r\n            <a href=\"/\">Home</a>\r\n            <a href=\"/about\">About</a>\r\n        </div>\r\n        \r\n        따라서 Link를 import해서 사용하면 됨\r\n        (Link는 Router밖에서는 작동 안됨 항상 Router 안에서만 사용 가능)\r\n        */\r\n    return(\r\n    <div className=\"nav\">\r\n        <Link to=\"/\">Home</Link>\r\n        <Link to=\"/about\">About</Link>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport About from \"./routes/About\";\nimport Home from \"./routes/Home\";\nimport Navigation from \"./components/Navigation\";\n\nfunction App(){\n    return(\n    /*\n                [React의 path]\n        react router는 기본적으로 url을 가져옴. 그다음 내 라우터에서 비교해 매치된다면 일치하는 component를 보여줌\n        따라서 /about은 매치되는 component가 2개이므로 2개가 같이 나옴.(react가 '/' 역시 component로 인식하기 때문)\n        ==> exact true를 추가해주면 url이 path와 정확히 일치할때만 나옴(이거 아니면 rendering 안함)\n        \n        Router는 HashRouter와 BrowserRouter가 있는데 HashRouter는 path 뒤에 #/이 따라옴 \n        무슨 차이 인지는 따로 공부해야 알듯\n         */\n    <BrowserRouter>\n        <Navigation />\n        <Route path=\"/\" exact={true} component={Home} />\n        <Route path=\"/about\" exact={true} component={About} />\n    </BrowserRouter>\n    );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}